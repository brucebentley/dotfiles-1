priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #! "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n" `
endsnippet

snippet sbash "safe bash options"
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
`!p snip.rv ='\n\n' `
endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
${2:pattern})
	$2;;
esac
endsnippet

snippet if "if ... then (if)"
if [[ ${1:condition} ]]; then
	${VISUAL}$2
fi
endsnippet

snippet elif "elif .. (elif)"
elif [[ ${1:condition} ]]; then
	${VISUAL}$2
endsnippet

snippet for "for ... done (for)"
for (( ${2:i} = 0; $2 < ${1:10}; ${3:++$2} )); do
	${VISUAL}$4
done
endsnippet

snippet fori "for ... in ... done (fori)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${VISUAL}$2
done
endsnippet

snippet until "until ... (done)"
until [[ ${1:condition} ]]; do
	${VISUAL}$2
done
endsnippet

snippet while "while ... (done)"
while [[ ${1:condition} ]]; do
	${VISUAL}$2
done
endsnippet

snippet fun "function"
function ${1:function_name}() {
	${VISUAL}$2
}
endsnippet

snippet root "root"
if [ \$(id -u) -ne 0 ]; then
	exec su -c $1;
fi
endsnippet

snippet (
( ${VISUAL}$1 )
endsnippet

snippet {
{ ${VISUAL}$1 }
endsnippet

snippet [
[[ ${VISUAL}$1 ]]
endsnippet
# vim:ft=snippets:
