###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define $1
endsnippet

snippet incc "#include <...>"
#include <${1:stdio}.h>
endsnippet

snippet inc "#include '...'"
#include "${1:`vim_snippets#Filename("$1.h")`}"
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif"
#if ${1:0}
${2}
#endif
endsnippet

snippet nocxx "#ifdef _cplusplus ... extern C .. #endif"
#ifdef __cplusplus
extern "C" {
#endif

${0}

#ifdef __cplusplus
} /* extern "C" */
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$3
endsnippet

snippet main "main() (main)"
int
main(int argc, char *argv[])
{
	${1}
	return 0;
}
endsnippet

snippet mainn "main() (void)"
int
main(void)
{
	${0}
	return 0;
}
endsnippet

snippet switch "switch (var) ... case: ... default:"
switch (${1:/* variable */}) {
case ${2:/* variable case */}:
	${3}
	${4:break;}${5}
default:
	${6}
}
endsnippet

snippet switchndef "switch (var) ... case:"
switch (${1:/* variable */}) {
case ${2:/* variable case */}:
	${3}
	${4:break;}${5}
}
endsnippet

snippet case
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${4}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${5}
}
endsnippet

snippet wh "while"
while (${1:/* condition */}) {
	${2}
}
endsnippet

snippet do "do ... while"
do {
	${2}
} while (${1:/* condition */});
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:name}
#define $1

${2}

#endif /* end of include guard: $1 */
endsnippet

snippet if "if .. (if)"
if (${1:/*condition */}) {
	${2}
}
endsnippet

snippet elif "else if .. (else if)"
else if (${1:/*condition*/}) {
	${2}
}
endsnippet

snippet ife "if / else / .. (eli)"
if (${1:/* condition */}) {
	${2}
} else {
	${3}
}
endsnippet

snippet ifee "if / elif / else / .. (elie)"
if (${1:/* condition */}) {
	${2}
} else if (${3:/* condition */}) {
	${4}
} else {
	${5}
}
endsnippet

snippet fpr "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet pr "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet prd
printf("${1} = %d\n", $1);
endsnippet

snippet prf
printf("${1} = %f\n", $1);
endsnippet

snippet prx
printf("${1} = %${2}\n", $1);
endsnippet

snippet fun "function"
${1:void}
${2:function_name}($3)
{
	${4}
}
endsnippet

snippet fun0 "function definition with zero parameters"
${1:void}
${2:function_name}()
{
	${3}
}
endsnippet

snippet fun1 "function definition with one parameter"
${1:void}
${2:function_name}(${3:Type} ${4:Parameter})
{
	${5}
}
endsnippet

snippet fun2 "function definition with two parameters"
${1:void}
${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})
{
	${7}
}
endsnippet

snippet fun3 "function definition with three parameters"
${1:void}
${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})
{
	${9}
}
endsnippet

snippet fund "function declaration"
${1:void} ${2:function_name}(${3});
endsnippet

snippet td "typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet st "struct"
struct ${1:name} {
	${2}
};
endsnippet

snippet tds "typedef struct"
typedef struct ${1:name} {
	${2}
} $1;
endsnippet

snippet enum "enum"
enum ${1:name} {
	${2}
};
endsnippet

snippet tde "typedef enum"
typedef enum {
	${1:Data}
} ${2:name};
endsnippet

snippet getopt "getopt"
int choice;
while (1) {
	static struct option long_options[] = {
		{"version", no_argument,	0,	'v'},
		{"help",	no_argument,	0,	'h'},
		${1}
		{0,0,0,0}
	};

	int option_index = 0;

	choice = getopt_long( argc, argv, "vh", long_options, &option_index);

	if (choice == -1)
		break;

	switch (choice) {
	case 'v':
		${2}
		break;

	case 'h':
		${3}
		break;

	case '?':
		break;

	default:
		return EXIT_FAILURE;
	}
}

if ( optind < argc ) {
	while ( optind < argc ) {
		${0}
	}
}
endsnippet

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]

def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet head "File Header"
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}
* Created:          `date +%m/%d/%y`
* Description:      ${4}
*****************************************************************************/
${0}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet func "Function Header"
/******************************************************************************
* Function:         $1
* Description:      ${4}
* Where:`!p
snip.rv = ""
snip >> 2

args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2){
	${0}
}
endsnippet

# vim:ft=snippets:
