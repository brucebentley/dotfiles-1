priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet inc "#include '...'" b
#include "${1:`vim_snippets#Filename("$1.h")`}"
endsnippet

snippet incc "#include <...>" b
#include <${1:iostream}>
endsnippet

snippet binc "#include <boost/shared_ptr.hpp>" r
#include <boost/${1:shared_ptr}.hpp>
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)" r
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet ns "namespace .. (namespace)" b
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)" b
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet array "std::array" b
std::array<${1:T}, ${2:N}> ${3};
endsnippet

snippet map "std::map (map)" b
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector" b
std::vector<${1:char}> ${2};
endsnippet

snippet deque "std::deque" b
std::deque<${1:T}> ${2};
endsnippet

snippet flist "std::forward_list" b
std::forward_list<${1:T}> ${2};
endsnippet

snippet list "std::list" b
std::list<${1:T}> ${2};
endsnippet

snippet set "std::set" b
std::set<${1:T}> ${2};
endsnippet

snippet map "std::map" b
std::map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet mset "std::multiset" b
std::multiset<${1:T}> ${2};
endsnippet

snippet mmap "std::multimap" b
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet uset "std::unordered_set" b
std::unordered_set<${1:T}> ${2};
endsnippet

snippet umap "std::unordered_map" b
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet umset "std::unordered_multiset" b
std::unordered_multiset<${1:T}> ${2};
endsnippet

snippet ummap "std::unordered_multimap" b
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet stack "std::stack" b
std::stack<${1:T}> ${2};
endsnippet

snippet queue "std::queue" b
std::queue<${1:T}> ${2};
endsnippet

snippet pqueue "std::priority_queue" b
std::priority_queue<${1:T}> ${2};
endsnippet

snippet tp "template <typename ..> (template)" b
template <typename ${1:_InputIter}>
endsnippet

snippet cout "std::cout" b
std::cout << ${1} << std::endl;
endsnippet

snippet cin "std::cin" b
std::cin >> ${1};
endsnippet

snippet sca "static_cast" b
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet dca "dynamic_cast" b
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet rca "reinterpret_cast" b
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet cca "constant_cast" b
const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!vsubstitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!vsubstitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''),'_\(\w\)', '\u\1', 'g')`} {
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet

snippet cl "class ... (class)" b
class ${1:`vim_snippets#Filename('$1', 'name')`} {
	public:
		$1(${2});
		virtual ~$1();

	protected:
		m_${5}; /*!< ${6:Member description} */
};
endsnippet

snippet mfun "member function implementation" b
${4:void}
${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3})
{
	${0:FunctionBody}
}
endsnippet

snippet dmfun0 "member function implementation without parameters" b
${3:void}
${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}()
{
	${0:FunctionBody}
}
endsnippet

snippet dmfun1 "member function implementation with one parameter" b
${5:void}
${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter})
{
	${0:FunctionBody}
}
endsnippet

snippet dmfun2 "member function implementation with two parameters" b
${7:void}
${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter},${5:Type} ${6:Parameter})
{
	${0:FunctionBody}
}
endsnippet

snippet fore "foreach" b
for (${1:auto} ${2:i} : ${3:container}) {
	${4}
}
endsnippet

snippet iter "iterator" b
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}
endsnippet

snippet itera "auto iterator" b
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet

snippet ld "lamda (one line)" b
[${1}](${2}){${3}};
endsnippet

snippet lld "lamda (multi-line)" b
[${1}](${2}){
	${3}
};
endsnippet

snippet try "try ... catch()" b
try {
	$1
}
catch(${2}) {
	$3
}
endsnippet

snippet afa "auto function" b
auto ${1:name}(${2}) -> ${3:void}
{
	${0:FunctionBody}
};
endsnippet

snippet fnc "Basic c++ doxygen function template" b
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

# vim:ft=snippets:
