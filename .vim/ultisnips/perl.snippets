priority -50

snippet #!
#!/usr/bin/env perl
endsnippet

snippet package "package"
package ${1:`expand('%:p:s?.*lib/??:r:gs?/?::?')`};
use strict;
use warnings;

${0}

1;

__END__
endsnippet

snippet switch "new 'switch' like function"
	use feature 'switch';
endsnippet

snippet . "hash pointer"
=>
endsnippet

snippet begin "begin block"
BEGIN {
	${2}
}
endsnippet

snippet asub "anonynomous subroutine"
sub {
	${2}
}
endsnippet

snippet sub "function"
sub ${1:function_name} {
	${2}
}
endsnippet

snippet if "if .. (if)"
if (${1}) {
	${2}
}
endsnippet

snippet ife "if / else / .. (eli)"
if (${1}) {
	${2}
}
else {
	${3}
}
endsnippet

snippet ifee "if / elsif / else / .. (elie)"
if (${1}) {
	${2}
}
elsif (${3}) {
	${4}
}
else {
	${5}
}
endsnippet

snippet elif "else if .. (else if)"
elsif (${1}) {
	${2}
}
endsnippet

snippet xif "conditional one-line"
${1:expression} if ${2:condition};
endsnippet

snippet unless "unless conditional"
unless (${1}) {
	${2}
}
endsnippet

snippet xunless "conditional one-line"
${1:expression} unless ${2:condition};
endsnippet

snippet eval "try/except"
local $@;
eval {
	${1}
};
if (my $e = $@) {
	${2}
}
endsnippet

snippet wh "while"
while (${1}) {
	${2}
}
endsnippet

snippet xwh "while loop one-line"
${1:expression} while ${2:condition};
endsnippet

snippet for "for loop"
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4}
	}
endsnippet

snippet xfor "for loop one-line"
	${1:expression} for @${2:array};
endsnippet

snippet fore "foreach loop"
foreach my $${1:x} (@${2:array}) {
	${3}
}
endsnippet

snippet xfore "foreach loop one-line"
${1:expression} foreach @${2:array};
endsnippet

snippet qrx "complex regex"
qr/
	${1}
/xms
endsnippet

snippet qr/ "simpler regex"
qr/${1}/x
endsnippet

snippet given "given"
given ($${1:var}) {
	${2}
}
endsnippet

snippet when "switch-like case"
when (${1:case}) {
	${2}
}
endsnippet

snippet hslice "hash slice"
@{ ${1:hash}  }{ ${2:array} }
endsnippet

snippet map "map"
map {  ${1: body }    }  ${2: @array } ;
endsnippet

# vim:ft=snippets:
